openapi: 3.0.0
info:
  title: Node TypeScript Backend API
  version: 1.0.0
  description: API documentation for Node TypeScript Backend

servers:
  - url: http://localhost:3000/api/v1
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 6
          example: "Test123!@#"
        role:
          type: string
          enum: [USER, ADMIN, user, admin]
          default: USER
          example: USER

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 6
          example: "Test123!@#"

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: user@example.com

    ResetPasswordRequest:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
          example: "reset-token-from-email"
        password:
          type: string
          minLength: 8
          pattern: "^(?=.*[0-9])(?=.*[!@#$%^&*(),.?\":{}|<>])[A-Za-z0-9!@#$%^&*(),.?\":{}|<>]{8,}$"
          example: "NewPassword123!"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          type: object
          properties:
            id:
              type: string
              example: "123e4567-e89b-12d3-a456-426614174000"
            email:
              type: string
              example: "user@example.com"
            role:
              type: string
              enum: [USER, ADMIN]
              example: "USER"

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "Password reset instructions sent to your email."

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Invalid credentials"

    GoogleAuthResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
              example: "123456789"
            displayName:
              type: string
              example: "John Doe"
            emails:
              type: array
              items:
                type: object
                properties:
                  value:
                    type: string
                    example: "john@example.com"
                  verified:
                    type: boolean
                    example: true
            photos:
              type: array
              items:
                type: object
                properties:
                  value:
                    type: string
                    example: "https://example.com/photo.jpg"

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Reset instructions sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/google:
    get:
      tags:
        - Authentication
      summary: Initiate Google OAuth login
      description: Redirects to Google's OAuth consent screen
      responses:
        '302':
          description: Redirect to Google OAuth consent screen

  /auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Google OAuth callback
      description: Handles the callback from Google OAuth
      responses:
        '302':
          description: Redirect to success or failure URL

  /auth/google/success:
    get:
      tags:
        - Authentication
      summary: Get Google authentication success data
      description: Returns the authenticated user's data
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleAuthResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Logs out the currently authenticated user
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully" 